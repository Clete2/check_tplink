name: Rust

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          fi
          cargo build --release --target ${{ matrix.target }}

      - name: Package binary
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/check_tplink artifacts/check_tplink-${{ matrix.target }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: check_tplink-${{ matrix.target }}
          path: artifacts/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          cp artifacts/check_tplink-x86_64-unknown-linux-gnu/check_tplink-x86_64-unknown-linux-gnu release-assets/
          cp artifacts/check_tplink-aarch64-unknown-linux-gnu/check_tplink-aarch64-unknown-linux-gnu release-assets/

      - name: Semantic Release
        id: semantic-release
        uses: go-semantic-release/action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        if: steps.semantic-release.outputs.version != ''
        run: |
          # Get the version from semantic release output
          VERSION="${{ steps.semantic-release.outputs.version }}"
          if [ -n "$VERSION" ]; then
            gh release upload "v$VERSION" release-assets/* --clobber
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
